###################
### dbHandler.c ###
###################

Calendar* ics_load(char* file)

    @parameter_in char* file
        File to load calendar into RAM from
    
    @return
        Returns a pointer to a Calendar structure.

    If the function ...
        a) cannot open the file specified 
        b) finds the file to be empty
        c) cannot allocate memory for the @return
        d) finds illegal line(s) in file
    
        ... then it dies, passing a corresponding message to stdout

int ics_write(Calendar* cal, char* file)

    @parameter_in Calendar* cal
        Pointer to Calendar structure to write to @file

    @parameter_out char* file
        File to write @cal into

    @return
        Returns 0 if ...
            a) the file already exists
            b) the file cannot be opened for writing

        Returns 1 if writing has been successful

Calendar* entry_add(Calendar* cal, const Event e)

    @parameter_in Calendar* cal
        Pointer to Calendar structure to update

    @parameter_in const Event e
        Event (structure) to append to @cal

    @return
        Function returns a pointer to the updated Calendar struct
        Function returns NULL if passed arguments were invalud (NULL) or if memory reallocation has been unsuccessful

###############
### drunt.c ###
###############

int main(int argc, char* argv[])

    @parameter_in int argc
        Number of arguments passed to function + 1

    @parameter_in char** argv
        Pointer to array of arguments passed to function (pointer to pointer to char <==> pointer to string)

    @return
        Returns 0 if no errors were encountered

    If @return is not 0, then the function dies, passing a relevant message to stdout

######################
### errorHandler.c ###
######################

void die(const char* message)

    @parameter_in const char* message
        Message to print to stdout

    @return
        VOID

    Function stops the whole programme

################
### helper,c ###
################

int isLeapYear(const int year)

    @parameter_in const int year
        int sized number to check

    @return
        Function returns ...
            0, if @year is not a leap year
            1, if @year is a leap year
            -1, if year is outside the bounds of calendar

int icsTimeStampReader(const char* str, DateTime* dt)
    
    @parameter_in const char* str
        String to interpret as timestamp and put into @dt

    @parameter_out DateTime* dt
        Pointer to DateTime* where timestamp will be put

    @return
        Function returns ...
            0, if
                a) @str is NULL
                b) myatoi() returns 0 for any part of timestamp
            1 in any other case

int myatoi(const char* str, int* out)

    @parameter_in const char* str
        String to 'convert' to int and store in @out

    @paremeter_out int* out
        Pointer to int where converted number will be stored

    @return
        Function returns ...
            0, if any conversion errors have been encountered
            1 otherwise

char* icsTagRemover(char* line, char* tag)

    @parameter_in char* line
        String to remove iCalendar tag @tag from

    @parameter_in char* tag
        iCalendar tag to remove from @line

    @return
        Function returns a string, which contains @line without @tag (excluding the colon between the tag and the value)

int promptYN(char* message)

    @parameter_in char* message
        String to prompt user with

    @return
        Function returns ...
            1, if user repsonse has been YES
            0 otherwise <==> user response has been NO
